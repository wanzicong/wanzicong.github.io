{"meta":{"title":"//欢迎来到这个超级帅气男人的网站//","subtitle":"","description":"","author":"爱笑的&’码农‘&","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"springboot-缓存使用-高级","slug":"springboot-缓存使用-高级","date":"2020-01-30T13:54:08.000Z","updated":"2020-01-30T13:55:40.399Z","comments":true,"path":"2020/01/30/springboot-缓存使用-高级/","link":"","permalink":"http://yoursite.com/2020/01/30/springboot-%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8-%E9%AB%98%E7%BA%A7/","excerpt":"","text":"1.SpringBoot 与缓存1. 缓存的重要概念 cache接口 实现类 RedisCache 类 EhCache类 ConcurrentMapCache 类 进行对缓存进行 增删改查操作 cacheManager接口 作用: 管理缓存组件 @CacheAble 注解 作用在方法上 将方法返回结果加入缓存当中 @CacheEvict注解 清空缓存 作用在方法上 CachePut注解 更新缓存 作用在方法上 EnableCaching 注解 开启基于注解的缓存模式 keyGenerater 缓存数据key 生成策略 serialize 缓存数据 value 生成策略 2.环境搭建 略 略 配置Mybatis信息 配置数据源 在application.property 文件当中 1spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver2spring.datasource.url=jdbc:mysql://localhost:3306/spring?useSSL=false&amp;serverTimezone=UTC3spring.datasource.username=root4spring.datasource.password=password 使用注解版的mybatis 在入口类上加上 @MapperScan（全类名-包） 作用扫描mapper 类 开启驼峰命名法 1mybatis.configuration.map- underscore-to-camel-case=true 体验注解步骤 开启基于注解缓存 在入口函数加上@EnableCaching 标注缓存注解即可 @Cacheable cacheName / value（将方法的返回结果保存起来） key keyGenerator 生成器 cacheManager cacheResolver 缓存管理器 condition 指定符合条件下才缓存 unless : 否定缓存 =true 时不缓存 sync 异步模式 ​ @Cacheable(cacheNames = “emp”) @CacheEvict @Cacheput @Caching 说明: 使用这些注解的前提是已经配置好了 and缓存已经开启的状态下 打印日志 1# 打印日志2logging.level.com.cache.mapper（包名）=debug 使用缓存过程中必须手动启动 redis 缓存,否则报错无法连接缓存 @Cacheable(cacheNames = “emp”) 访问缓存数据使用spEl表达式 使用@Cacheable注解中的key 属性 + spel 表达式自定义缓存名 key = \"#root.methodName+'['+#id+']' 126. 使用@Cacheable注解中的keyGenerator属性 34 1. 指定自己的可以的生成器56 2. 在配置类当中加入代码78 &#96;&#96;&#96;java9 public class MyCache &#123;10 &#x2F;**11 * 自定义cache生成器12 *&#x2F;13 @Bean(&quot;mykeyGenerator&quot;)14 public KeyGenerator keyGenerator()&#123;15 return new KeyGenerator()&#123;16 @Override17 public Object generate(Object target, Method method, Object... params) &#123;18 return method.getName() + &quot;[&quot; + Arrays.asList(params).toString() + &quot;]&quot;;19 &#125;20 &#125;;21 &#125;22 &#125; 在注解中加入 1keyGenerator = \"mykeyGenerator\" (bean 的id) 使用@CachePut更新修改后的 缓存 注意: 修改后的缓存 需要与之前的缓存保持一致 与sql 语句的update 对应 与跟新的key 保持一致 1@CachePut(value = \"emp\" ,key \"#result.id\") 使用@CacheEvict 注解 清除之前的缓存 对应的是sql 语句的delete 语句 与之前的缓存id 保持一致 (属性)allEntries = true 删除缓存中的所有数据 &lt;!--￼6--&gt; @CacheEvict((属性)value = \"emp\", （属性）key=\"#id\",（属性）allEntries = true) &lt;!--￼7--&gt; @CacheConfig 注解 作用在类上 指定所有的缓存value值 ==== cacheName = “名字” 指定 不同缓存注解的公共属性：keyGenerator，cacheManager cacheReslover 属性 3 源码1. [SpringBoot高级](https://github.com/garxin/SpringBoot-Advanced)4 高级搭建 redis环境 缓存没有进行配置时间默认使用的是 CacheManager(缓存管理器) 为 ConcurrentMapCacheManager 1. 将数据保存到了ConcurrentMap&lt;&gt; 中 开发中经常使用一些缓存中间件 redis memcached ehcache ===== 整合redis ======= 配置redis 在配置文件当中 配置后就可用 RedisTemplate 类 和 StringRedisTemplate 类 来操作redis 1stringRedisTemplate.opsForValue().append(\"msg\",\"子聪\");2stringRedisTemplate.opsForValue().set(\"msg\",\"王子\");3String msg = stringRedisTemplate.opsForValue().get(\"msg\"); 自定义RedisTemplate的序列化器 1 //方法名就是bean的id2@bean3 Jackson2JsonRedisSerializer&lt;Employee&gt; serializer = new Jackson2JsonRedisSerializer&lt;Employee&gt;(Employee.class);4 redisTemplate.setDefaultSerializer(serializer);5 return redisTemplate;6 &#125;7&#125; =======测试缓存 ======= 自定义CacheManager 来进行序列化的改造 @Primary 注解作用：指定默认 的缓存管理器","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"},{"name":"缓存","slug":"缓存","permalink":"http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"}]},{"title":"npm创建vue项目","slug":"npm创建vue项目","date":"2020-01-30T12:52:19.000Z","updated":"2020-01-30T12:54:14.805Z","comments":true,"path":"2020/01/30/npm创建vue项目/","link":"","permalink":"http://yoursite.com/2020/01/30/npm%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"创建vue3 项目的步骤第一步安装全局的vue 脚手架（电脑安装一次就行了） 1npm install -g @vue/cli 第二步检查vue脚手架的 版本 1vue -V (!必须是大写的V) 第三步创建新文件夹 ，进入文件夹执行命令 1vue create myVue (!项目名称) 第四步进行项目的初始化，选择安装插件 1出现界面的选择， 选择手动设置 第五步1) . 选择配置的内容（关键的一步） 1选择第一个 Babel2选择第第四个 Router（路由）3 4 5 6Linter/Formattor 可以选， 初学不建议选， 最后可以在项目中进行组件追加的方式7其他的组件有进行单元测试用的 可以进行添加配置8npm install 命令 就是进行组件的下载用 2) . 选择别的一些设置 1. 是否使用历史的设置 -----选择 y 2. 其他的.... 选择 y 3. 选择 json 4. 全部默认直到结束 第六步启动安装好的vue项目 1npm run server 补充安装淘宝镜像 1npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org 启动一个项目1npm install Compiles and hot-reloads for development1npm run serve Compiles and minifies for production1npm run build Customize configurationSee Configuration Reference.","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"},{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"博客部署命令","slug":"博客部署命令","date":"2020-01-30T12:51:47.000Z","updated":"2020-01-30T12:57:05.564Z","comments":true,"path":"2020/01/30/博客部署命令/","link":"","permalink":"http://yoursite.com/2020/01/30/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4/","excerpt":"","text":"上传hexo 博客的命令第一条命令1hexo clean 第二条命令1hexo g （generate） 第三条命令1hexo deploy 最后1输入自己的GitHub账号和密码 就行","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}