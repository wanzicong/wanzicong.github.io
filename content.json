{"meta":{"title":"//欢迎来到这个超级帅气男人的网站//","subtitle":"","description":"","author":"爱笑的&’码农‘&","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"typora快捷键","slug":"typora快捷键","date":"2020-04-27T00:45:26.000Z","updated":"2020-04-27T00:46:59.827Z","comments":true,"path":"2020/04/27/typora快捷键/","link":"","permalink":"http://yoursite.com/2020/04/27/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"一：菜单栏 文件：alt+F 编辑：alt+E 段落：alt+P 格式：alt+O 视图：alt+V 主题：alt+T 帮助：alt+H 二：文件 新建：Ctrl+N 新建窗口：Ctrl+Shift+N 打开：Ctrl+O 快速打开：Ctrl+P 保存：Ctrl+S 另存为：Ctrl+Shift+S 偏好：Ctrl+, 关闭：Ctrl+W 三：编辑 撤销：Ctrl+Z 重做：Ctrl+Y 剪切：Ctrl+X 复制：Ctrl+C 粘贴：Ctrl+V 复制为MarkDown：Ctrl+Shift+C 粘贴为纯文本：Ctrl+Shift+V 全选：Ctrl+A 选中当前行/句：Ctrl+L 选中当前格式文本：Ctrl+E 选中当前词：Ctrl+D 跳转到文首：Ctrl+Home 跳转到所选内容：Ctrl+J 跳转到文末：Ctrl+End 查找：Ctrl+F 查找下一个：F3 查找上一个：Shift+F3 替换：Ctrl+H 四：段落 标题：Ctrl+1/2/3/4/5 段落：Ctrl+0 增大标题级别：Ctrl+= 减少标题级别：Ctrl+- 表格：Ctrl+T 代码块：Ctrl+Shift+K 公式块：Ctrl+Shift+M 引用：Ctrl+Shift+Q 有序列表：Ctrl+Shift+[ 无序列表：Ctrl+Shift+] 增加缩进：Ctrl+] 减少缩进：Ctrl+[ 五：格式 加粗：Ctrl+B 斜体：Ctrl+I 下划线：Ctrl+U 代码：Ctrl+Shift+` 删除线：Alt+Shift+5 超链接：Ctrl+K 图像：Ctrl+Shift+I 清除样式：Ctrl+ 六：视图 显示隐藏侧边栏：Ctrl+Shift+L 大纲视图：Ctrl+Shift+1 文档列表视图：Ctrl+Shift+2 文件树视图：Ctrl+Shift+3 源代码模式：Ctrl+/ 专注模式：F8 打字机模式：F9 切换全屏：F11 实际大小：Ctrl+Shift+0 放大：Ctrl+Shift+= 缩小：Ctrl+Shift+- 应用内窗口切换：Ctrl+Tab 打开DevTools：Shift+F12","categories":[],"tags":[{"name":"typora","slug":"typora","permalink":"http://yoursite.com/tags/typora/"}]},{"title":"docker基础命令","slug":"docker基础命令","date":"2020-03-08T02:49:50.000Z","updated":"2020-03-08T02:55:16.735Z","comments":true,"path":"2020/03/08/docker基础命令/","link":"","permalink":"http://yoursite.com/2020/03/08/docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/","excerpt":"","text":"Docker命令终结 vim命令1. docker查看报错信息1$ docker logs --since 30m 容器id(名字) 2. 宿主机 启动Docker1sysyemctl start docker 2sysyemctl restart docker 3. docker 启动容器1docker start 容器id(名字)2docker restart 容器id(名字) 4. docker 创建容器1docker run -di --name=名字 -p 9000:9000 镜像名字：版本号 (不写代表是last最新版本) 5. vi + 文件名字打开 文件1vi 文件名 6 . 进入vim中 i键表示开始插入1i 7. shift +z +z 表示退出 + 保存shift +z +z {vim} 8. docker进入docker 容器虚拟机中1docker exec -it 容器名(id) /bin/bash 9. 在docker中挂载外部文件1docker cp 文件 容器名:/path/path/path","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"SpringBoot 整合安全框架Spring Security 快速如门","slug":"SpringBoot-整合安全框架Spring-Security-快速如门","date":"2020-02-13T09:06:36.000Z","updated":"2020-02-13T09:08:17.740Z","comments":true,"path":"2020/02/13/SpringBoot-整合安全框架Spring-Security-快速如门/","link":"","permalink":"http://yoursite.com/2020/02/13/SpringBoot-%E6%95%B4%E5%90%88%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6Spring-Security-%E5%BF%AB%E9%80%9F%E5%A6%82%E9%97%A8/","excerpt":"","text":"快速开始 Quick Start第一步：引入Jar 包 POM文件1&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;2&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"3 xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;4 &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;5 &lt;parent&gt;6 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;7 &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;8 &lt;version&gt;2.1.2.RELEASE&lt;/version&gt;9 &lt;!--&lt;version&gt;2.2.4.RELEASE&lt;/version&gt;--&gt;10 &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;11 &lt;/parent&gt;12 &lt;groupId&gt;com&lt;/groupId&gt;13 &lt;artifactId&gt;security&lt;/artifactId&gt;14 &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;15 &lt;name&gt;security&lt;/name&gt;16 &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;1718 &lt;properties&gt;19 &lt;java.version&gt;1.8&lt;/java.version&gt;20 &lt;/properties&gt;2122 &lt;!--pom 依赖--&gt;23 &lt;dependencies&gt;24 &lt;dependency&gt;25 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;26 &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;27 &lt;/dependency&gt;28 &lt;dependency&gt;29 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;30 &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;31 &lt;/dependency&gt;32 &lt;dependency&gt;33 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;34 &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;35 &lt;/dependency&gt;36 &lt;!--&lt;dependency&gt;--&gt;37 &lt;!--&lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;--&gt;38 &lt;!--&lt;artifactId&gt;thymeleaf-extras-springsecurity4&lt;/artifactId&gt;--&gt;39 &lt;!--&lt;version&gt;3.0.2.RELEASE&lt;/version&gt;--&gt;40 &lt;!--&lt;/dependency&gt;--&gt;41 &lt;!--版本太低 导致无法加载sec 标签 换为高版本的即可--&gt;42 &lt;dependency&gt;43 &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;44 &lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;/artifactId&gt;45 &lt;/dependency&gt;46 &lt;dependency&gt;47 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;48 &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;49 &lt;scope&gt;test&lt;/scope&gt;50 &lt;/dependency&gt;5152 &lt;!--springBoot 热部署--&gt;53 &lt;dependency&gt;54 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;55 &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;56 &lt;optional&gt;true&lt;/optional&gt;57 &lt;scope&gt;true&lt;/scope&gt;58 &lt;/dependency&gt;5960 &lt;/dependencies&gt;6162 &lt;build&gt;63 &lt;plugins&gt;64 &lt;plugin&gt;65 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;66 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;67 &lt;/plugin&gt;68 &lt;/plugins&gt;69 &lt;/build&gt;7071&lt;/project&gt; 出现的问题导入的 org.thymeleaf.extras thymeleaf-extras-springsecurity4 版本过低无法使用 安全标签在页面中无法起作用 应该导入的版本是 ​ ​ org.thymeleaf.extras​ thymeleaf-extras-springsecurity5​ 第二步是：开始进行编写配置类文件1package com.security.config;23import org.springframework.context.annotation.Configuration;4import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;5import org.springframework.security.config.annotation.web.builders.HttpSecurity;6import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;7import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;89@EnableWebSecurity10@Configuration11/**12 * 必须继承 WebSecurityConfigurerAdapter13 * 必须加入 @EnableWebSecurity注解14 * 从写 configuration() 方法15 */16public class MySecurityConfig extends WebSecurityConfigurerAdapter &#123;17 // 制定请求授权规则18 @Override19 protected void configure(HttpSecurity http) throws Exception &#123;20 http.authorizeRequests().antMatchers(\"/\").permitAll()21 //赋予每个请求的用户 级别以及身份22 .antMatchers(\"/level1/**\").hasRole(\"vip1\")23 .antMatchers(\"/level2/**\").hasRole(\"vip2\")24 .antMatchers(\"/level3/**\").hasRole(\"vip3\");25 //开启自动配置的登录功能26 // 如果没有权限就会回到登录页面27 // http.formLogin().usernameParameter(\"user\").passwordParameter(\"password\").loginPage(\"/userLogin\").loginProcessingUrl(\"/userLogin\"); //是自定义登录页面以及登录的参数设置（密码。用户名）28 http.formLogin();29 //开启注销功能30 // 消除session 注销成功会返回这个页面:/login?logout31 http.logout().logoutSuccessUrl(\"/\");32 //开启记住我功能33 //创建cookie34 //记住我的参数的名字 http.rememberMe().rememberMeParameter(\"remember-me\");35 http.rememberMe();36 /**37 * 记录一下规则38 * 1. /login 请求来到登录页面39 * 2. 重定向到 /login?error 表示登录失败40 * 3. 更多详细规定41 */4243 &#125;4445 //定义认证规则46 @Override47 protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;48 // 使用内存查询用户49 auth.inMemoryAuthentication().passwordEncoder(new MyPasswordEncoder())50 .withUser(\"wanzicong\").password(\"123456\").roles(\"vip1\", \"vip2\")51 .and()52 .withUser(\"mayun\").password(\"123456\").roles(\"vip2\", \"vip3\")53 .and()54 .withUser(\"liuqiandong\").password(\"123456\").roles(\"vip3\", \"vip1\");55 //使用jdbc查询用户56 //auth.jdbcAuthentication();57 &#125;58&#125; 出现的问题进行路径访问时间导致参数 id 为空，登录的问题 解决办法解决问题的网站： https://blog.csdn.net/weixin_39220472/article/details/80865411 编写MyPasswordEncoder类 ，对进行登录的密码 进行编码上的改造 并且继承 PasswordEncoder 类 代码如下： 1package com.security.config;23import org.springframework.security.crypto.password.PasswordEncoder;45/**6 * 添加到认证当中去 防止登录时间报错7 * 这是SpringBoot 2的特性8 * 解决报错信息的网站: https://blog.csdn.net/weixin_39220472/article/details/808654119 */10public class MyPasswordEncoder implements PasswordEncoder &#123;1112 @Override13 public String encode(CharSequence charSequence) &#123;14 return charSequence.toString();15 &#125;1617 @Override18 public boolean matches(CharSequence charSequence, String s) &#123;19 return s.equals(charSequence.toString());20 &#125;21&#125; 第三步 进行页面的Controller的编写 以及页面主页的编写主页：1&lt;!DOCTYPE html&gt;2&lt;html xmlns:th=\"http://www.thymeleaf.org\"3 xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity5\"&gt;4&lt;head&gt;5 &lt;meta charset=\"UTF-8\"&gt;6 &lt;title&gt;Welcome Page&lt;/title&gt;7&lt;/head&gt;8&lt;body&gt;9&lt;h1 align=\"center\"&gt;欢迎光临武林秘籍管理系统&lt;/h1&gt;10&lt;div sec:authorize=\"!isAuthenticated()\"&gt;11 &lt;h2 align=\"center\"&gt;游客您好，如果想查看武林秘籍&lt;a th:href=\"@&#123;/login&#125;\"&gt;请登录&lt;/a&gt;&lt;/h2&gt;12&lt;/div&gt;13&lt;div sec:authorize=\"isAuthenticated()\"&gt;14 &lt;h2&gt;15 &lt;span sec:authentication=\"name\"&gt;&lt;/span&gt;您好，您的角色有：16 &lt;span sec:authentication=\"principal.authorities\"&gt;&lt;/span&gt;17 &lt;/h2&gt;18 &lt;form th:action=\"@&#123;/logout&#125;\" method=\"post\"&gt;19 &lt;input type=\"submit\" value=\"注销\"&gt;20 &lt;/form&gt;21&lt;/div&gt;22&lt;hr&gt;23&lt;div sec:authorize=\"hasRole('vip1')\"&gt;24 &lt;h3&gt;普通武功秘籍&lt;/h3&gt;25 &lt;ul&gt;26 &lt;li&gt;&lt;a th:href=\"@&#123;/level1/1&#125;\"&gt;罗汉拳&lt;/a&gt;&lt;/li&gt;27 &lt;li&gt;&lt;a th:href=\"@&#123;/level1/2&#125;\"&gt;武当长拳&lt;/a&gt;&lt;/li&gt;28 &lt;li&gt;&lt;a th:href=\"@&#123;/level1/3&#125;\"&gt;全真剑法&lt;/a&gt;&lt;/li&gt;29 &lt;/ul&gt;30&lt;/div&gt;31&lt;div sec:authorize=\"hasRole('vip2')\"&gt;32 &lt;h3&gt;高级武功秘籍&lt;/h3&gt;33 &lt;ul&gt;34 &lt;li&gt;&lt;a th:href=\"@&#123;/level2/1&#125;\"&gt;太极拳&lt;/a&gt;&lt;/li&gt;35 &lt;li&gt;&lt;a th:href=\"@&#123;/level2/2&#125;\"&gt;七伤拳&lt;/a&gt;&lt;/li&gt;36 &lt;li&gt;&lt;a th:href=\"@&#123;/level2/3&#125;\"&gt;梯云纵&lt;/a&gt;&lt;/li&gt;37 &lt;/ul&gt;38&lt;/div&gt;39&lt;div sec:authorize=\"hasRole('vip3')\"&gt;40 &lt;h3&gt;绝世武功秘籍&lt;/h3&gt;41 &lt;ul&gt;42 &lt;li&gt;&lt;a th:href=\"@&#123;/level3/1&#125;\"&gt;葵花宝典&lt;/a&gt;&lt;/li&gt;43 &lt;li&gt;&lt;a th:href=\"@&#123;/level3/2&#125;\"&gt;龟派气功&lt;/a&gt;&lt;/li&gt;44 &lt;li&gt;&lt;a th:href=\"@&#123;/level3/3&#125;\"&gt;独孤九剑&lt;/a&gt;&lt;/li&gt;45 &lt;/ul&gt;46&lt;/div&gt;47&lt;/body&gt;48&lt;/html&gt; Controller 类1package com.security.controller;23import org.springframework.stereotype.Controller;4import org.springframework.web.bind.annotation.GetMapping;5import org.springframework.web.bind.annotation.PathVariable;67@Controller8public class SecurityController &#123;910 //定义页面跳转的前缀11 private final String PREFIX = \"pages/\";1213 // 欢迎页面14 @GetMapping(\"/\")15 public String index() &#123;16 return \"welcome\";17 &#125;1819 // 登录页面20 @GetMapping(\"/userLogin\")21 public String loginPage() &#123;22 return PREFIX + \"login\";23 &#125;2425 // 返回级别为一的页面26 @GetMapping(\"/level1/&#123;path&#125;\")27 public String level1(@PathVariable(\"path\") String path) &#123;28 return PREFIX + \"level1/\" + path;29 &#125;3031 // 返回级别为二的页面32 @GetMapping(\"/level2/&#123;path&#125;\")33 public String level2(@PathVariable(\"path\") String path) &#123;34 return PREFIX + \"level2/\" + path;35 &#125;3637 // 返回级别为三的页面38 @GetMapping(\"/level3/&#123;path&#125;\")39 public String level3(@PathVariable(\"path\") String path) &#123;40 return PREFIX + \"level3/\" + path;41 &#125;42&#125; 第四步：总结安全框架分为两大步骤： 进行安全的授权规则 对页面的地址进行访问权限的控制，进行分级别 进行安全的 认证规则 对用户的权限的设置，以及登录的设置 每个用户会有不同的身份，不同的身份也会有不同的，访问权限 他们这些设置全部体现在代码的配置类当中","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"},{"name":"安全框架","slug":"安全框架","permalink":"http://yoursite.com/tags/%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/"},{"name":"SpringBoot整合","slug":"SpringBoot整合","permalink":"http://yoursite.com/tags/SpringBoot%E6%95%B4%E5%90%88/"}]},{"title":"爬虫小实例","slug":"爬虫小实例","date":"2020-02-08T14:16:26.000Z","updated":"2020-02-08T14:17:17.828Z","comments":true,"path":"2020/02/08/爬虫小实例/","link":"","permalink":"http://yoursite.com/2020/02/08/%E7%88%AC%E8%99%AB%E5%B0%8F%E5%AE%9E%E4%BE%8B/","excerpt":"","text":"爬虫入门基础入门xpath 使用 去w3 官网进行学习 代码1package com.spider;23import org.openqa.selenium.By;4import org.openqa.selenium.WebDriver;5import org.openqa.selenium.WebElement;6import org.openqa.selenium.chrome.ChromeDriver;78import java.util.List;910/**11 * 快捷键 :12 * ctrl +alt + v 抽取变量13 * ctrl +alt + m 抽取方法(这个idea不适用)14 * shift + alt + m 抽取方法15 * shift + alt + r 可以批量修改变量16 * shift + enter 可以从一行的中间换行17 * ctrl + alt + l 自动对齐18 * alt + enter ---选try catch or throw 抛异常快捷键19 * 集合名字.for() + enter(回车) 循环快捷键20 * 变量.sout + enter(回车) 输出打印该元素21 */2223public class Spider &#123;24 public static void main(String[] args) &#123;25 //操作浏览器26 System.setProperty(\"webdriver.chrome.driver\", Spider.class.getClassLoader().getResource(\"chromedriver.exe\").getPath());27 WebDriver webDriver = new ChromeDriver();28 webDriver.get(\"https://www.lagou.com/zhaopin/Java/?labelWords=label\");29 webDriver.findElement(By.xpath(\"//div[@class='body-btn']\")).click();30 //操作页面的元素3132 //选中选项 跳转页面33 //点击弹出来的对话框34 clickOption(webDriver, \"工作经验\", \"不限\");35 clickOption(webDriver, \"学历要求\", \"本科\");36 clickOption(webDriver, \"融资阶段\", \"不限\");37 clickOption(webDriver, \"公司规模\", \"不限\");38 clickOption(webDriver, \"行业领域\", \"移动互联网\");39 //解析页面元素40 getJobsByPagination(webDriver);41 &#125;4243 private static void getJobsByPagination(WebDriver webDriver) &#123;44 List&lt;WebElement&gt; jodElements = webDriver.findElements(By.className(\"con_list_item \"));45 for (WebElement jodElement : jodElements) &#123;46 WebElement moneyElement = jodElement.findElement(By.className(\"position\")).findElement(By.className(\"money\"));47 WebElement company_name = jodElement.findElement(By.className(\"company_name\"));48 System.out.println(company_name.getText() + \" : \" + moneyElement.getText());49 &#125;50 WebElement nextPageBtn = webDriver.findElement(By.className(\"pager_next \"));51 if (!nextPageBtn.getAttribute(\"class\").contains(\"pager_next_disabled\")) &#123;52 System.out.println(\"----解析下一页---\");53 //点击下一页54 nextPageBtn.click();55 try &#123;56 Thread.sleep(2000L);57 &#125; catch (InterruptedException e) &#123;58 e.printStackTrace();59 &#125;60 //递归调用61 getJobsByPagination(webDriver);62 &#125;6364 &#125;6566 private static void clickOption(WebDriver webDriver, String chosenTitle, String optionTitle) &#123;67 WebElement chosenElement = webDriver.findElement(By.xpath(\"//li[@class='multi-chosen']//span[contains(text(),'\" + chosenTitle + \"')]\"));68 WebElement optionElement = chosenElement.findElement(By.xpath(\"../a[contains(text(),'\" + optionTitle + \"')]\"));69 optionElement.click();70 &#125;71&#125;","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"springCloud 入门步骤和概念","slug":"springCloud-入门步骤和概念","date":"2020-02-07T05:52:07.000Z","updated":"2020-02-07T05:53:45.448Z","comments":true,"path":"2020/02/07/springCloud-入门步骤和概念/","link":"","permalink":"http://yoursite.com/2020/02/07/springCloud-%E5%85%A5%E9%97%A8%E6%AD%A5%E9%AA%A4%E5%92%8C%E6%A6%82%E5%BF%B5/","excerpt":"","text":"1. SpringBoot 入门核心概念注册中心 服务的消费者 服务的提供者 SpringCloud 五大组件• 服务发现——Netflix Eureka • 客服端负载均衡——Netflix Ribbon • 断路器——Netflix Hystrix • 服务网关——Netflix Zuul • 分布式配置——Spring Cloud Config SpringCloud的重要概念配置管理 服务发现 熔断 路由 微代理 控制总线 一次性token 全局琐 leader选举 分布式session 集群状态 入门步骤– 1、创建provider – 2、创建consumer – 3、引入Spring Cloud – 4、引入Eureka注册中心 – 5、引入Ribbon进行客户端负载均衡 – 6、引入Feign进行声明式HTTP远程调用 2. SpringCloud 的入门实践工程的基本组成三个SpringBoot的模块 第一个是服务的注册中心 第二个是服务的提供者 第三个是服务的消费者 编写服务的注册中心编写注册中心的配置 1server:2 port: 87613eureka:4 instance:5 hostname: server # 注册中心实例的名字6 client:7 register-with-eureka: false # 作用就是不把自己注册在注册中心8 fetch-registry: false # 不获取服务的注册信息9 service-url:10 defaultZone: http://localhost:8761/eureka/ 编写启动注册功能的注解 1/**2 * 注册中心3 */4@SpringBootApplication5//启动注册中心的服务6@EnableEurekaServer7public class ServerApplication &#123;8 public static void main(String[] args) &#123;9 SpringApplication.run(ServerApplication.class, args);10 &#125;11&#125; 编写服务提供者注册功能正常编写业务逻辑 service and controller 编写注册提供者的配置信息 ，将服务注册到注册中心 编写注册的配置信息 1# 注册服务到注册中心23server:4 port: 8001567spring:8 application:9 name: provider1011# 注册自己12eureka:13 instance:14 prefer-ip-address: true #注册服务的时候使用服务的IP地址15 client:16 service-url:17 defaultZone: http://localhost:8761/eureka/ 编写服务消费者订阅功能编写业务逻辑 service and controller 编写注册信息将自己注册到注册中心 注册信息 消费者 和 提供者的注册信息一样 1server:2 port: 80023spring:4 application:5 name: ticket-user67# 发现服务8eureka:9 instance:10 prefer-ip-address: true #注册服务的时候使用服务的IP地址11 client:12 service-url:13 defaultZone: http://localhost:8761/eureka/ 编写启动类 添加注解 以及注册 用到的类信息 1@EnableDiscoveryClient2@SpringBootApplication3public class ConsumerApplication &#123;4 public static void main(String[] args) &#123;5 SpringApplication.run(ConsumerApplication.class, args);6 &#125;78 //发送http请求9 @LoadBalanced //平衡加载10 @Bean11 public RestTemplate restTemplate() &#123;12 return new RestTemplate();13 &#125;14&#125; 实现业务逻辑的调用 1@RestController2public class UserController &#123;34 @Autowired5 RestTemplate restTemplate;67 @GetMapping(\"/buy\")8 public String buyTicket(String name) &#123;9 10 //url 是 提供者在注册中心的主机名 + controller里面的请求地址11 String url = \"http://TICKET-PROVIDER/ticket\";12 String ticket = restTemplate.getForObject(url, String.class);13 return name + \"购买了\" + ticket;14 &#125;15&#125; 入门实践的总结他们进行引入pom 文件的时间引入的类名不一样 启用的作用不同 一类是注册中心功能 一类是发现服务功能 代码路径 https://github.com/garxin/SpringBoot-Advanced","categories":[],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"http://yoursite.com/tags/springcloud/"},{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"}]},{"title":"Springboot 基础","slug":"Springboot-基础","date":"2020-02-05T06:25:56.000Z","updated":"2020-02-05T06:29:28.390Z","comments":true,"path":"2020/02/05/Springboot-基础/","link":"","permalink":"http://yoursite.com/2020/02/05/Springboot-%E5%9F%BA%E7%A1%80/","excerpt":"","text":"springBoot基础1. 配置数据源信息（Druid） 使用的数据源默认是 jdbc.pool.DataSources jdbc 整合 略 数据源的的相关配置都在DataSourceProperties 类里面 数据源的自动配置原理 DataSourceConfiguration类 根据配置进行数据源的设置连接池 spring.datasource.type 指定自定义的数据源配置 springBoot 支持数据源（。。。。。。。。好多） 可以自己创建数据源 自动配置类当中可以自动进行数据源的 配置并且支持自动执行sql语句 放在resources路径下 并且名字 是schema- .sql — data-sql文件类型 也可以使用配置的方式指定 执行文件的路径 以及名字 6. 也有自动配置的操作数据库的类 JDBCTemplate 高级配置-整合druid 数据源 引入数据源 spring.datasource.type= 数据源的全类名 &lt;!--￼0--&gt; 2.整合Mybatis 使用注解版的方式 在Service 类上面加入@Mapper 注解 也可以在启动类里面加入 @MapperScan(value = “全类名”) —–就不用都添加@Mapper注解了 自动获取自增主键（在注解版当中） 该注解作用在 方法上 @Options(useGeneratedKeys = true ,keyProperty = \"id\") &lt;!--￼1--&gt; 使用mybatis全局配置文件 和 mapper.xml 文件进行配置 mybatis 全局配置文件可以替换 类配置文件 使用映射文件操作数据库 需要的配置 mybatis.config-location=classpath:配置文件路径 mybatis.mapper-locations= classpath:处理数据库的接口类 mybatis.type-aliases-package=com.project.model 扫描实体类的路径 12 124. mybatis 全局配置文件34 &#96;&#96;&#96;xml5 &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;6 &lt;!DOCTYPE configuration7 PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;8 &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;9 &lt;configuration&gt;10 11 &lt;settings&gt;12 &lt;setting name&#x3D;&quot;mapUnderscoreToCamelCase&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;13 &lt;&#x2F;settings&gt;14 &lt;&#x2F;configuration&gt; 125. mapper.xml 映射文件34 &#96;&#96;&#96;xml5 &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;6 &lt;!DOCTYPE mapper7 PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;8 &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;9 &lt;mapper namespace&#x3D;&quot;com.atguigu.springboot.mapper.EmployeeMapper&quot;&gt;10 &lt;!-- public Employee getEmpById(Integer id);11 12 public void insertEmp(Employee employee);--&gt;13 &lt;select id&#x3D;&quot;getEmpById&quot; resultType&#x3D;&quot;com.atguigu.springboot.bean.Employee&quot;&gt;14 SELECT * FROM employee WHERE id&#x3D;#&#123;id&#125;15 &lt;&#x2F;select&gt;16 17 &lt;insert id&#x3D;&quot;insertEmp&quot;&gt;18 INSERT INTO employee(lastName,email,gender,d_id) VALUES (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)19 &lt;&#x2F;insert&gt;20 &lt;&#x2F;mapper&gt;2122 &#96;&#96;&#96;xml23 &lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;24 &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot; &gt;25 26 27 &lt;mapper namespace&#x3D;&quot;com.project.mapper.UserMapper&quot;&gt;28 &lt;select id&#x3D;&quot;xml&quot; resultType&#x3D;&quot;com.project.model.User&quot;&gt;29 select * from user30 &lt;&#x2F;select&gt;31 &lt;&#x2F;mapper&gt; 5. 使用yml 文件进行数据的配置 1spring:2 datasource:3# 数据源基本配置4 username: root5 password: 1234566 driver-class-name: com.mysql.jdbc.Driver7 url: jdbc:mysql://192.168.15.22:3306/mybatis8 type: com.alibaba.druid.pool.DruidDataSource9# 数据源其他配置10 initialSize: 511 minIdle: 512 maxActive: 2013 maxWait: 6000014 timeBetweenEvictionRunsMillis: 6000015 minEvictableIdleTimeMillis: 30000016 validationQuery: SELECT 1 FROM DUAL17 testWhileIdle: true18 testOnBorrow: false19 testOnReturn: false20 poolPreparedStatements: true21# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙22 filters: stat,wall,log4j23 maxPoolPreparedStatementPerConnectionSize: 2024 useGlobalDataSourceStat: true25 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=50026mybatis: 指定全局配置文件位置 config-location: classpath:mybatis/mybatis-config.xml # 指定sql映射文件位置 mapper-locations: classpath:mybatis/mapper/*.xml //指定项目启动 时间执行的sql 语句的位置 1schema:2 - classpath:sql/department.sql3- classpath:sql/employee.sql 3.配置文件1. 配置文件类型 property yaml 优先级 applocation.property &gt; application.yaml 2. 外部文件加载顺序 使用命令行运行项目时间，修改默认配置。 优先加载 带 .profile 3. 配置文件加载位置 file/config file/ resources/ config 文件下面 resources 的根目录下面 优先级从高到低 高优先级的配置文件会覆盖低优先级的配置 可以使用spring.config.location= 路径 （写在配置文件的里面） 来改变配置文件的位置 4 配置文件的文件名字的含义 application.dev.property 开发环境 application.prod.property 生产环境 默认使用的是 application.property 可以激活 开发环境 或者生产环境—– 在 application.property 中加入 spring.profile.active=dev 激活开发环境 使用yaml 配置文件中使用多文档块 1server:2 port: 80803spring:4 profiles:5 active: dev6---7server:8 port: 80819spring:10 profiles: dev1112---13server:14 port: 808215spring:16 profiles: prod ​","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"},{"name":"SpringBoot基础","slug":"SpringBoot基础","permalink":"http://yoursite.com/tags/SpringBoot%E5%9F%BA%E7%A1%80/"}]},{"title":"springboot-缓存使用-高级","slug":"springboot-缓存使用-高级","date":"2020-01-30T13:54:08.000Z","updated":"2020-01-30T13:55:40.399Z","comments":true,"path":"2020/01/30/springboot-缓存使用-高级/","link":"","permalink":"http://yoursite.com/2020/01/30/springboot-%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8-%E9%AB%98%E7%BA%A7/","excerpt":"","text":"1.SpringBoot 与缓存1. 缓存的重要概念 cache接口 实现类 RedisCache 类 EhCache类 ConcurrentMapCache 类 进行对缓存进行 增删改查操作 cacheManager接口 作用: 管理缓存组件 @CacheAble 注解 作用在方法上 将方法返回结果加入缓存当中 @CacheEvict注解 清空缓存 作用在方法上 CachePut注解 更新缓存 作用在方法上 EnableCaching 注解 开启基于注解的缓存模式 keyGenerater 缓存数据key 生成策略 serialize 缓存数据 value 生成策略 2.环境搭建 略 略 配置Mybatis信息 配置数据源 在application.property 文件当中 1spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver2spring.datasource.url=jdbc:mysql://localhost:3306/spring?useSSL=false&amp;serverTimezone=UTC3spring.datasource.username=root4spring.datasource.password=password 使用注解版的mybatis 在入口类上加上 @MapperScan（全类名-包） 作用扫描mapper 类 开启驼峰命名法 1mybatis.configuration.map- underscore-to-camel-case=true 体验注解步骤 开启基于注解缓存 在入口函数加上@EnableCaching 标注缓存注解即可 @Cacheable cacheName / value（将方法的返回结果保存起来） key keyGenerator 生成器 cacheManager cacheResolver 缓存管理器 condition 指定符合条件下才缓存 unless : 否定缓存 =true 时不缓存 sync 异步模式 ​ @Cacheable(cacheNames = “emp”) @CacheEvict @Cacheput @Caching 说明: 使用这些注解的前提是已经配置好了 and缓存已经开启的状态下 打印日志 1# 打印日志2logging.level.com.cache.mapper（包名）=debug 使用缓存过程中必须手动启动 redis 缓存,否则报错无法连接缓存 @Cacheable(cacheNames = “emp”) 访问缓存数据使用spEl表达式 使用@Cacheable注解中的key 属性 + spel 表达式自定义缓存名 key = \"#root.methodName+'['+#id+']' 126. 使用@Cacheable注解中的keyGenerator属性 34 1. 指定自己的可以的生成器56 2. 在配置类当中加入代码78 &#96;&#96;&#96;java9 public class MyCache &#123;10 &#x2F;**11 * 自定义cache生成器12 *&#x2F;13 @Bean(&quot;mykeyGenerator&quot;)14 public KeyGenerator keyGenerator()&#123;15 return new KeyGenerator()&#123;16 @Override17 public Object generate(Object target, Method method, Object... params) &#123;18 return method.getName() + &quot;[&quot; + Arrays.asList(params).toString() + &quot;]&quot;;19 &#125;20 &#125;;21 &#125;22 &#125; 在注解中加入 1keyGenerator = \"mykeyGenerator\" (bean 的id) 使用@CachePut更新修改后的 缓存 注意: 修改后的缓存 需要与之前的缓存保持一致 与sql 语句的update 对应 与跟新的key 保持一致 1@CachePut(value = \"emp\" ,key \"#result.id\") 使用@CacheEvict 注解 清除之前的缓存 对应的是sql 语句的delete 语句 与之前的缓存id 保持一致 (属性)allEntries = true 删除缓存中的所有数据 &lt;!--￼6--&gt; @CacheEvict((属性)value = \"emp\", （属性）key=\"#id\",（属性）allEntries = true) &lt;!--￼7--&gt; @CacheConfig 注解 作用在类上 指定所有的缓存value值 ==== cacheName = “名字” 指定 不同缓存注解的公共属性：keyGenerator，cacheManager cacheReslover 属性 3 源码1. [SpringBoot高级](https://github.com/garxin/SpringBoot-Advanced)4 高级搭建 redis环境 缓存没有进行配置时间默认使用的是 CacheManager(缓存管理器) 为 ConcurrentMapCacheManager 1. 将数据保存到了ConcurrentMap&lt;&gt; 中 开发中经常使用一些缓存中间件 redis memcached ehcache ===== 整合redis ======= 配置redis 在配置文件当中 配置后就可用 RedisTemplate 类 和 StringRedisTemplate 类 来操作redis 1stringRedisTemplate.opsForValue().append(\"msg\",\"子聪\");2stringRedisTemplate.opsForValue().set(\"msg\",\"王子\");3String msg = stringRedisTemplate.opsForValue().get(\"msg\"); 自定义RedisTemplate的序列化器 1 //方法名就是bean的id2@bean3 Jackson2JsonRedisSerializer&lt;Employee&gt; serializer = new Jackson2JsonRedisSerializer&lt;Employee&gt;(Employee.class);4 redisTemplate.setDefaultSerializer(serializer);5 return redisTemplate;6 &#125;7&#125; =======测试缓存 ======= 自定义CacheManager 来进行序列化的改造 @Primary 注解作用：指定默认 的缓存管理器","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"},{"name":"缓存","slug":"缓存","permalink":"http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"}]},{"title":"npm创建vue项目","slug":"npm创建vue项目","date":"2020-01-30T12:52:19.000Z","updated":"2020-01-30T12:54:14.805Z","comments":true,"path":"2020/01/30/npm创建vue项目/","link":"","permalink":"http://yoursite.com/2020/01/30/npm%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"创建vue3 项目的步骤第一步安装全局的vue 脚手架（电脑安装一次就行了） 1npm install -g @vue/cli 第二步检查vue脚手架的 版本 1vue -V (!必须是大写的V) 第三步创建新文件夹 ，进入文件夹执行命令 1vue create myVue (!项目名称) 第四步进行项目的初始化，选择安装插件 1出现界面的选择， 选择手动设置 第五步1) . 选择配置的内容（关键的一步） 1选择第一个 Babel2选择第第四个 Router（路由）3 4 5 6Linter/Formattor 可以选， 初学不建议选， 最后可以在项目中进行组件追加的方式7其他的组件有进行单元测试用的 可以进行添加配置8npm install 命令 就是进行组件的下载用 2) . 选择别的一些设置 1. 是否使用历史的设置 -----选择 y 2. 其他的.... 选择 y 3. 选择 json 4. 全部默认直到结束 第六步启动安装好的vue项目 1npm run server 补充安装淘宝镜像 1npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org 启动一个项目1npm install Compiles and hot-reloads for development1npm run serve Compiles and minifies for production1npm run build Customize configurationSee Configuration Reference.","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"},{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"博客部署命令","slug":"博客部署命令","date":"2020-01-30T12:51:47.000Z","updated":"2020-01-30T12:57:05.564Z","comments":true,"path":"2020/01/30/博客部署命令/","link":"","permalink":"http://yoursite.com/2020/01/30/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4/","excerpt":"","text":"上传hexo 博客的命令第一条命令1hexo clean 第二条命令1hexo g （generate） 第三条命令1hexo deploy 最后1输入自己的GitHub账号和密码 就行","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}