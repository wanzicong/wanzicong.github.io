<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>//欢迎来到这个超级帅气男人的网站//</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-30T13:55:40.399Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>爱笑的&amp;’码农‘&amp;</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot-缓存使用-高级</title>
    <link href="http://yoursite.com/2020/01/30/springboot-%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8-%E9%AB%98%E7%BA%A7/"/>
    <id>http://yoursite.com/2020/01/30/springboot-%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8-%E9%AB%98%E7%BA%A7/</id>
    <published>2020-01-30T13:54:08.000Z</published>
    <updated>2020-01-30T13:55:40.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-SpringBoot-与缓存"><a href="#1-SpringBoot-与缓存" class="headerlink" title="1.SpringBoot 与缓存"></a>1.SpringBoot 与缓存</h3><h4 id="1-缓存的重要概念"><a href="#1-缓存的重要概念" class="headerlink" title="1. 缓存的重要概念"></a>1. 缓存的重要概念</h4><ol><li>cache接口<ol><li>实现类 RedisCache 类 EhCache类 ConcurrentMapCache 类</li><li>进行对缓存进行 增删改查操作</li></ol></li><li>cacheManager接口<ol><li>作用: 管理缓存组件</li></ol></li><li>@CacheAble 注解<ol><li>作用在方法上</li><li>将方法返回结果加入缓存当中</li></ol></li><li>@CacheEvict注解<ol><li>清空缓存</li><li>作用在方法上</li></ol></li><li>CachePut注解<ol><li>更新缓存</li><li>作用在方法上</li></ol></li><li>EnableCaching 注解<ol><li>开启基于注解的缓存模式</li></ol></li><li>keyGenerater<ol><li>缓存数据key 生成策略</li></ol></li><li>serialize<ol><li>缓存数据 value 生成策略</li></ol></li></ol><h4 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h4><ol><li><p>略</p></li><li><p>略</p></li><li><p>配置Mybatis信息</p><ol><li><p>配置数据源 在application.property 文件当中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring?useSSL=false&amp;serverTimezone=UTC</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">password</span></span></pre></td></tr></table></figure></li><li><p>使用注解版的mybatis</p><ol><li><p>在入口类上加上 @MapperScan（全类名-包）</p><ol><li>作用扫描mapper 类</li></ol></li><li><p>开启驼峰命名法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">mybatis.configuration.map-</span>  <span class="string">underscore-to-camel-case=true</span></span></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>体验注解步骤</p><ol><li><p>开启基于注解缓存</p><ol><li>在入口函数加上@EnableCaching</li></ol></li><li><p><strong>标注缓存注解即可</strong></p><ol><li><strong>@Cacheable</strong> <ol><li><strong>cacheName / value（将方法的返回结果保存起来）</strong></li><li><strong>key</strong></li><li><strong>keyGenerator 生成器</strong></li><li><strong>cacheManager cacheResolver 缓存管理器</strong></li><li><strong>condition 指定符合条件下才缓存</strong></li><li><strong>unless : 否定缓存 =true 时不缓存</strong></li><li><strong>sync 异步模式</strong></li><li>​    <strong>@Cacheable(cacheNames = “emp”)</strong></li></ol></li><li><strong>@CacheEvict</strong></li><li><strong>@Cacheput</strong></li><li><strong>@Caching</strong></li><li><code>说明: 使用这些注解的前提是已经配置好了 and缓存已经开启的状态下</code></li></ol></li><li><p>打印日志</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印日志</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">logging.level.com.cache.mapper（包名）</span>=<span class="string">debug</span></span></pre></td></tr></table></figure></li><li><p>使用缓存过程中必须手动启动 redis 缓存,否则报错无法连接缓存    </p><ol><li>@Cacheable(cacheNames = “emp”)</li></ol></li><li><p>访问缓存数据使用spEl表达式 </p></li></ol></li><li><p>使用@Cacheable注解中的key 属性 + spel 表达式自定义缓存名</p><ol><li><pre><code class="java">key = <span class="string">"#root.methodName+'['+#id+']'</span><span class="string"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">6. 使用@Cacheable注解中的keyGenerator属性 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   1. 指定自己的可以的生成器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   2. 在配置类当中加入代码</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      &#96;&#96;&#96;java</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      public class MyCache &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">          &#x2F;**</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">           * 自定义cache生成器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">           *&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">          @Bean(&quot;mykeyGenerator&quot;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">          public KeyGenerator keyGenerator()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            return new KeyGenerator()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                  @Override</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                  public Object generate(Object target, Method method, Object... params) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                      return method.getName() + &quot;[&quot; + Arrays.asList(params).toString() + &quot;]&quot;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">              &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr></table></figure></span></code></pre></li><li><p>在注解中加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">keyGenerator = <span class="string">"mykeyGenerator"</span> (bean 的id)</span></pre></td></tr></table></figure></li></ol></li><li><p>使用@CachePut更新修改后的 缓存</p><ol><li><p>注意: 修改后的缓存 需要与之前的缓存保持一致</p></li><li><p>与sql 语句的update 对应 </p></li><li><p>与跟新的key 保持一致 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut</span>(value = <span class="string">"emp"</span> ,key <span class="string">"#result.id"</span>)</span></pre></td></tr></table></figure></li></ol></li><li><p>使用@CacheEvict 注解 清除之前的缓存 </p><ol><li><p>对应的是sql 语句的delete 语句</p></li><li><p>与之前的缓存id 保持一致</p></li><li><pre><code class="java">(属性)allEntries = <span class="keyword">true</span> 删除缓存中的所有数据&lt;!--￼<span class="number">6</span>--&gt;<span class="meta">@CacheEvict</span>((属性)value = <span class="string">"emp"</span>,              （属性）key=<span class="string">"#id"</span>,（属性）allEntries = <span class="keyword">true</span>)&lt;!--￼<span class="number">7</span>--&gt;</code></pre></li></ol></li><li><p>@CacheConfig 注解 </p><ol><li>作用在类上</li><li>指定所有的缓存value值    ====   cacheName = “名字”</li><li>指定 不同缓存注解的公共属性：keyGenerator，cacheManager cacheReslover 属性</li></ol></li></ol><h4 id="3-源码"><a href="#3-源码" class="headerlink" title="3 源码"></a>3 源码</h4><pre><code>1. [SpringBoot高级](https://github.com/garxin/SpringBoot-Advanced)</code></pre><h4 id="4-高级搭建-redis环境"><a href="#4-高级搭建-redis环境" class="headerlink" title="4 高级搭建 redis环境"></a>4 高级搭建 redis环境</h4><ol><li><p>缓存没有进行配置时间默认使用的是 CacheManager(缓存管理器) 为 ConcurrentMapCacheManager</p><pre><code>1. 将数据保存到了ConcurrentMap&lt;&gt; 中</code></pre></li><li><p>开发中经常使用一些缓存中间件 redis  memcached ehcache</p></li><li><p>===== 整合redis  =======</p></li><li><p>配置redis 在配置文件当中</p></li><li><p>配置后就可用 RedisTemplate 类 和 StringRedisTemplate 类 来操作redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().append(<span class="string">"msg"</span>,<span class="string">"子聪"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">"msg"</span>,<span class="string">"王子"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">String msg = stringRedisTemplate.opsForValue().get(<span class="string">"msg"</span>);</span></pre></td></tr></table></figure></li><li><p>自定义RedisTemplate的序列化器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法名就是bean的id</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@bean</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Jackson2JsonRedisSerializer&lt;Employee&gt; serializer = <span class="keyword">new</span>        Jackson2JsonRedisSerializer&lt;Employee&gt;(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        redisTemplate.setDefaultSerializer(serializer);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> redisTemplate;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>=======测试缓存 =======</p></li><li><p>自定义CacheManager 来进行序列化的改造</p></li><li><p>@Primary 注解作用：指定默认 的缓存管理器</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-SpringBoot-与缓存&quot;&gt;&lt;a href=&quot;#1-SpringBoot-与缓存&quot; class=&quot;headerlink&quot; title=&quot;1.SpringBoot 与缓存&quot;&gt;&lt;/a&gt;1.SpringBoot 与缓存&lt;/h3&gt;&lt;h4 id=&quot;1-缓存的重要概念
      
    
    </summary>
    
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>npm创建vue项目</title>
    <link href="http://yoursite.com/2020/01/30/npm%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2020/01/30/npm%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-01-30T12:52:19.000Z</published>
    <updated>2020-01-30T12:54:14.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建vue3-项目的步骤"><a href="#创建vue3-项目的步骤" class="headerlink" title="创建vue3 项目的步骤"></a>创建vue3 项目的步骤</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>安装全局的vue 脚手架（电脑安装一次就行了）</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>检查vue脚手架的 版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">vue -V (!必须是大写的V)</span></pre></td></tr></table></figure><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>创建新文件夹 ，进入文件夹执行命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function">vue create <span class="title">myVue</span>  <span class="params">(!项目名称)</span></span></span></pre></td></tr></table></figure><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>进行项目的初始化，选择安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">出现界面的选择， 选择手动设置</span></pre></td></tr></table></figure><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>1) .  选择配置的内容（关键的一步）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">选择第一个 Babel</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">选择第第四个 Router（路由）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Linter/Formattor 可以选， 初学不建议选， 最后可以在项目中进行组件追加的方式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">其他的组件有进行单元测试用的 可以进行添加配置</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">npm install 命令 就是进行组件的下载用</span></pre></td></tr></table></figure><p>2) . 选择别的一些设置</p><pre><code>1. 是否使用历史的设置 -----选择 y   2. 其他的....  选择 y    3. 选择 json   4. 全部默认直到结束 </code></pre><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>启动安装好的vue项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm run server</span></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>安装淘宝镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm  install  -g  cnpm  --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span></pre></td></tr></table></figure><h2 id="启动一个项目"><a href="#启动一个项目" class="headerlink" title="启动一个项目"></a>启动一个项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install</span></pre></td></tr></table></figure><h3 id="Compiles-and-hot-reloads-for-development"><a href="#Compiles-and-hot-reloads-for-development" class="headerlink" title="Compiles and hot-reloads for development"></a>Compiles and hot-reloads for development</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm run serve</span></pre></td></tr></table></figure><h3 id="Compiles-and-minifies-for-production"><a href="#Compiles-and-minifies-for-production" class="headerlink" title="Compiles and minifies for production"></a>Compiles and minifies for production</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm run build</span></pre></td></tr></table></figure><h3 id="Customize-configuration"><a href="#Customize-configuration" class="headerlink" title="Customize configuration"></a>Customize configuration</h3><p>See <a href="https://cli.vuejs.org/config/" target="_blank" rel="noopener">Configuration Reference</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建vue3-项目的步骤&quot;&gt;&lt;a href=&quot;#创建vue3-项目的步骤&quot; class=&quot;headerlink&quot; title=&quot;创建vue3 项目的步骤&quot;&gt;&lt;/a&gt;创建vue3 项目的步骤&lt;/h2&gt;&lt;h3 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class
      
    
    </summary>
    
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>博客部署命令</title>
    <link href="http://yoursite.com/2020/01/30/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/01/30/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4/</id>
    <published>2020-01-30T12:51:47.000Z</published>
    <updated>2020-01-30T12:57:05.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="上传hexo-博客的命令"><a href="#上传hexo-博客的命令" class="headerlink" title="上传hexo 博客的命令"></a>上传hexo 博客的命令</h3><h3 id="第一条命令"><a href="#第一条命令" class="headerlink" title="第一条命令"></a>第一条命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo clean</span></pre></td></tr></table></figure><h3 id="第二条命令"><a href="#第二条命令" class="headerlink" title="第二条命令"></a>第二条命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo g （generate）</span></pre></td></tr></table></figure><h3 id="第三条命令"><a href="#第三条命令" class="headerlink" title="第三条命令"></a>第三条命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo deploy</span></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">输入自己的GitHub账号和密码 就行</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;上传hexo-博客的命令&quot;&gt;&lt;a href=&quot;#上传hexo-博客的命令&quot; class=&quot;headerlink&quot; title=&quot;上传hexo 博客的命令&quot;&gt;&lt;/a&gt;上传hexo 博客的命令&lt;/h3&gt;&lt;h3 id=&quot;第一条命令&quot;&gt;&lt;a href=&quot;#第一条命令&quot; c
      
    
    </summary>
    
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
